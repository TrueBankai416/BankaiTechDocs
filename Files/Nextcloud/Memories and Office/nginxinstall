#!/bin/bash

set -e

export DEBIAN_FRONTEND=noninteractive

# Check the host's operating system
OS=$(uname -s)
if [ "$OS" = "Linux" ]; then
    # Check if the distribution is Ubuntu
    if [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        if [ "$DISTRIB_ID" != "Ubuntu" ]; then
            echo "Warning: This script has only been tested on Ubuntu."
            read -p "Do you want to continue? (y/N): " confirm
            if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
                echo "Exiting script."
                exit 1
            fi
        fi
    else
        echo "Warning: Unable to determine Linux distribution. This script has only been tested on Ubuntu."
        read -p "Do you want to continue? (y/N): " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            echo "Exiting script."
            exit 1
        fi
    fi
else
    echo "Unsupported operating system: $OS"
    echo "This script only works for Linux systems."
    read -p "Press ENTER to exit."
    exit 1
fi

echo ""
echo "Before Preceeding, please ensure that port 443 is open on your router and port forwarding is configured to forward traffic to the IP address of this Host"
echo "Press CTRL+C to Cancel ... wait (10s)"
sleep 10

# Prompt user for Nginx installation option
echo ""
echo "Select the Nginx installation option:"
echo "1) Create nextcloud.conf file"
echo "2) Install Nginx and Configure for Nextcloud"
read -p "Enter your choice (1/2): " INSTALL_OPTION

# Check if Nginx is installed
if ! nginx -v &> /dev/null; then
    echo "Nginx is not installed. Installing Nginx..."
    sudo apt-get update
    sudo apt-get install -y nginx
    echo ""
    echo "Nginx has been installed."
else
    echo "Nginx is already installed."
fi

# Check if Certbot is installed
if ! command -v certbot &> /dev/null; then
    echo "Certbot is not installed. Installing Certbot..."
    sudo apt-get update
    sudo apt-get install -y certbot python3-certbot-nginx
    echo "Certbot has been installed."
else
    echo "Certbot is already installed."
fi

# Prompt user for Nextcloud IP
echo ""
echo "What is your nextcloud IP address? "
echo "Example: 192.168.1.23"
read -p "Enter Nextcloud's IP: " NC_IP

# Prompt user for Nextcloud Port
echo ""
echo "What port is Nextcloud Listening on? (Default: 8080) "
read -p "Enter Nextcloud's Port: " NC_PORT

# Prompt user for Domain
echo ""
echo "What is your nextcloud domain? "
echo "Example: cloud.bankai-tech.com"
read -p "Enter your domain: " DOMAIN_NAME

# Prompt user for Collabora Domain
echo ""
echo "Will you be using Collabora (NC Office)? (y/N): "
read -p "Enter (y/N): " install_collabora
if [[ "$install_collabora" =~ ^[Yy]$ ]]; then
    echo ""
    echo "What is your collabora domain? "
    echo "Example: office.bankai-tech.com"
    read -p "Enter your domain: " COLLABORA_DOMAIN
fi

# Prompt user for Email
echo ""
echo "What is your email? "
read -p "Enter your email: " EMAIL

# Obtain SSL certificates for DOMAIN_NAME
echo "Obtaining SSL certificates for $DOMAIN_NAME..."
sudo certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos -m "$EMAIL" --redirect

# Check if Collabora Domain is provided and obtain SSL certificates
if [[ "$install_collabora" =~ ^[Yy]$ ]]; then
    echo "Obtaining SSL certificates for $COLLABORA_DOMAIN..."
    sudo certbot --nginx -d "$COLLABORA_DOMAIN" --non-interactive --agree-tos -m "$EMAIL" --redirect
fi

echo "SSL certificates have been obtained successfully."

# Create and configure Nginx server block for Nextcloud
NEXTCLOUD_CONF="/etc/nginx/sites-available/nextcloud.conf"
sudo touch $NEXTCLOUD_CONF
echo "map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
server {
    listen 80;
    server_name $DOMAIN_NAME;

    location / {
        rewrite ^ https://\$server_name\$request_uri? permanent;
    }
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN_NAME;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem;

    #                        GZIP but do not remove etag
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;
    #                        Security Headers
    add_header Expect-CT "enforce, max-age=31536000";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #                    add_header Permissions-Policy "accelerometer=(),ambient-light-sensor=(),autoplay=(),battery=(),camera=(),cross-origin-isolated=(self),display-capture=(),document-domain=(),encrypted-media=(),execution-while-not-rendered=(),execution-while-out-of-viewport=(),fullscreen=(self),geolocation=(),gyroscope=(),hid=(),idle-detection=(),magnetometer=(),microphone=(),midi=(),navigation-override=(),payment=(),picture-in-picture=(),publickey-credentials-get=(),screen-wake-lock=(),serial=(),sync-xhr=(),usb=(),web-share=(),web-share=(),clipboard-read=(self),clipboard-write=(self)";
    #                        Allow upload of large files
    client_max_body_size 10G;
    #                        Cache
    proxy_cache_key $scheme$proxy_host$request_uri;
    add_header X-Cache-Status $upstream_cache_status;
    client_header_buffer_size 50m;
    client_body_buffer_size 50m;
    client_body_timeout 300s;
    #                        CALDAV CARDAV Discovery
    rewrite ^/\.well-known/carddav https://$DOMAIN_NAME/remote.php/dav/ redirect;
    rewrite ^/\.well-known/caldav https://$DOMAIN_NAME/remote.php/dav/ redirect;
    #                        Connect to backend server
    location / {
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        #proxy_cookie_path / "/; SameSite=strict; HTTPOnly; Secure";
        proxy_pass http://$NC_IP:$NC_PORT$request_uri;
        proxy_set_header Host $host;
        proxy_set_header Upgrade websocket;
        proxy_set_header Connection Upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 300s;
        #Cache
        proxy_buffering on;
        proxy_cache_valid 200;
        proxy_cache_background_update on;
    }
    #                        Fix webfinger and nodefinger
    location ^~ /.well-known/ {
        return 301 /index.php$uri;
    }
    location ^~ /push/ {
        proxy_pass http://$NC_IP:7867/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    location ^~ /metrics/ {
        proxy_pass http://NC_IP:7868/metrics;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header Upgrade websocket;
        proxy_set_header Connection Upgrade;
        proxy_set_header CF-Connecting-IP $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 300s;
        #Cache
        proxy_buffering on;
        proxy_cache_valid 200;
        proxy_cache_background_update on;
    }

}" | sudo tee $NEXTCLOUD_CONF

# Enable the Nextcloud site by creating a symbolic link
sudo ln -s $NEXTCLOUD_CONF /etc/nginx/sites-enabled/

# Check if Collabora Domain is provided and configure
if [[ "$install_collabora" =~ ^[Yy]$ ]]; then
    COLLABORA_CONF="/etc/nginx/sites-available/collabora.conf"
    sudo touch $COLLABORA_CONF
    echo "server {
        listen 443 ssl;
        server_name $COLLABORA_DOMAIN;

        ssl_certificate /etc/letsencrypt/live/$COLLABORA_DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/$COLLABORA_DOMAIN/privkey.pem;

    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Expect-CT "enforce, max-age=31536000";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #                         Security / XSS Mitigation Headers
    #                         NOTE: X-Frame-Options may cause issues with the webOS app
    #           add_header X-Frame-Options "SAMEORIGIN"; 
    #                         Do NOT enable. This is obsolete/dangerous
    add_header X-XSS-Protection "0";
    add_header X-Content-Type-Options "nosniff";
    #             Connect to backend server
    set $collabora https://$NC_IP:9980;
    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header CF-Connecting-IP $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass $collabora;
    }
    #        static files
    location ^~ /browser {
        proxy_pass $collabora;
        proxy_set_header Host $http_host;
    }
    #        WOPI discovery URL
    location ^~ /hosting/discovery {
        proxy_pass $collabora;
        proxy_set_header Host $http_host;
    }
    #        Capabilities
    location ^~ /hosting/capabilities {
        proxy_pass $collabora;
        proxy_set_header Host $http_host;
    }
    #        main websocket
    location ~ ^/cool/(.*)/ws$ {
        proxy_pass $collabora;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 36000s;
    }
    #        download, presentation and image upload
    location ~ ^/(c|l)ool {
        proxy_pass $collabora;
        proxy_set_header Host $http_host;
    }
    #        Admin Console websocket
    location ^~ /cool/adminws {
        proxy_pass $collabora;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 36000s;
        # HSTS (ngx_http_headers_module is required) (63072000 seconds = 2 years)
        add_header Strict-Transport-Security "max-age=63072000;includeSubDomains; preload" always;
    }
    }" | sudo tee $COLLABORA_CONF

    # Enable the Collabora site by creating a symbolic link
    sudo ln -s $COLLABORA_CONF /etc/nginx/sites-enabled/
fi

# Reload Nginx to apply the changes
sudo nginx -t && sudo systemctl reload nginx

echo "Nginx configuration for Nextcloud and Collabora has been added and enabled."
