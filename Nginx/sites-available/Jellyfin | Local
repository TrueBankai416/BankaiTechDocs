map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
server {
    listen 80;
    server_name jellyfin.local;
    return 301 https://$server_name$request_uri;
}
server {
    listen 443 ssl;
    http2 on;
    server_name jellyfin.local;
    # The default `client_max_body_size` is 1M, this might not be enough for some posters, etc.
    client_max_body_size 20M;
    # use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin 192.168.9.151:8096;
    # Load TLS Certs
    ssl_certificate /etc/letsencrypt/live/local/cert.pem;
    ssl_certificate_key /etc/letsencrypt/live/local/key.pem;
    # Use standardized security headers
    include /etc/nginx/snippets/security-headers.conf;
    
    # Jellyfin-specific media streaming overrides (local instance)
    add_header X-XSS-Protection "0";  # Explicitly disabled for media streaming
    
    # Media streaming cache killing
    add_header Last-Modified $date_gmt;
    add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    if_modified_since off;
    expires off;
    etag off;
    
    # Enhanced media streaming permissions policy (more restrictive than standard)
    add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), battery=(), bluetooth=(), camera=(), clipboard-read=(), display-capture=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), payment=(), publickey-credentials-get=(), serial=(), sync-xhr=(), usb=(), xr-spatial-tracking=()" always;
    
    # Media streaming process isolation
    add_header Origin-Agent-Cluster "?1" always;
    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    # NOTE: The default CSP headers may cause issues with the webOS app
    # add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";
    # location = / {
    # return 302 http://$host/web/;
    # return 302 https://$host/web/;
    # }
    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }
    # location block for /web - This is purely for aesthetics so /web/!/ works instead of having to go to /web/index.html/!/
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://$jellyfin;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
    location /accounts {
        set $upstream_accounts http://192.168.9.151:8056;
        proxy_pass $upstream_accounts;
        
        # Authentication configuration (legacy method for compatibility)
        auth_request /internal/authelia/authz;
        auth_request_set $target_url $scheme://$http_host$request_uri;
        auth_request_set $user $upstream_http_remote_user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-User $user;
        proxy_set_header Remote-Groups $groups;
        error_page 401 =302 https://auth.lunekes.com/?rd=$target_url;
        
        # Use Jellyfin-optimized proxy configuration
        include /etc/nginx/snippets/jellyfin-proxy.conf;
        
        # Proxy timeouts (extended for local accounts service)
        proxy_connect_timeout 360;
        proxy_send_timeout 360;
        proxy_read_timeout 360;
        
        # Jellyfin accounts-specific settings
        proxy_cache_bypass $cookie_session;
        proxy_no_cache $cookie_session;
        send_timeout 5m;
        
        # Real IP configuration for this network
        set_real_ip_from 192.168.9.0/24;
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    # Include Authelia location block
    include /etc/nginx/snippets/authelia-location.conf;
}